generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                      String                   @id
  username                String                   @unique
  displayName             String
  email                   String?                  @unique
  passwordHash            String?
  googleId                String?                  @unique
  avatarUrl               String?
  bio                     String?
  createdAt               DateTime                 @default(now())
  emailVerifiedAt         DateTime?
  bookmarks               Bookmark[]
  comments                Comment[]
  commentLikes            CommentLike[]
  emailVerificationTokens EmailVerificationToken[]
  following               Follow[]                 @relation("Following")
  followers               Follow[]                 @relation("Followers")
  likes                   Like[]
  notes                   Note[]
  notificationSettings    NotificationSettings?
  issuedNotifications     Notification[]           @relation("Issuer")
  receivedNotifications   Notification[]           @relation("Recipient")
  passwordResetTokens     PasswordResetToken[]
  posts                   Post[]
  sessions                Session[]
  stories                 Story[]
  storyViews              StoryView[]
  storyHighlights         StoryHighlight[]

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(cuid())
  content             String
  userId              String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  archived            Boolean        @default(false)
  visibility          PostVisibility @default(PUBLIC)
  bookmarks           Bookmark[]
  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Media {
  id              String           @id @default(cuid())
  postId          String?
  type            MediaType
  url             String
  createdAt       DateTime         @default(now())
  post            Post?            @relation(fields: [postId], references: [id])
  storyMedia      StoryMedia[]
  storyHighlights StoryHighlight[]

  @@map("post_media")
}

model Comment {
  id        String         @id @default(cuid())
  content   String
  userId    String
  postId    String
  parentId  String?        // For replies - references parent comment
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  post      Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]      @relation("CommentReplies")
  likes     CommentLike[]

  @@index([postId])
  @@index([parentId])
  @@map("comments")
}

model CommentLike {
  userId    String
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@map("comment_likes")
}

model Like {
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Story {
  id            String         @id @default(cuid())
  userId        String
  expiresAt     DateTime
  privacy       StoryPrivacy   @default(FOLLOWERS)
  createdAt     DateTime       @default(now())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         StoryMedia[]
  views         StoryView[]
  notifications Notification[]
  highlightItems HighlightItem[]

  @@index([userId, expiresAt])
  @@index([privacy])
  @@map("stories")
}

model StoryMedia {
  storyId  String
  mediaId  String
  order   Int
  media    Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  story    Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@id([storyId, mediaId])
  @@map("story_media")
}

model StoryView {
  id       String   @id @default(cuid())
  userId   String
  storyId  String
  viewedAt DateTime @default(now())
  story    Story    @relation(fields: [storyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, storyId])
  @@index([storyId, viewedAt])
  @@map("story_views")
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model NotificationSettings {
  userId        String  @id
  emailLikes    Boolean @default(true)
  emailComments Boolean @default(true)
  emailFollows  Boolean @default(true)
  emailMentions Boolean @default(true)
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_settings")
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  issuerId    String
  postId      String?
  storyId     String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  story       Story?           @relation(fields: [storyId], references: [id], onDelete: Cascade)
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("password_reset_tokens")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("email_verification_tokens")
}

model Note {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.VarChar(60)
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@map("notes")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  GIF
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
  MENTION
  REPLY
  COMMENT_LIKE
  STORY
}

model StoryHighlight {
  id           String          @id @default(cuid())
  userId       String
  title        String
  coverMediaId String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  coverMedia   Media?          @relation(fields: [coverMediaId], references: [id], onDelete: SetNull)
  items        HighlightItem[]

  @@index([userId])
  @@map("story_highlights")
}

model HighlightItem {
  id          String         @id @default(cuid())
  highlightId String
  storyId     String
  order       Int            @default(0)
  addedAt     DateTime       @default(now())
  highlight   StoryHighlight @relation(fields: [highlightId], references: [id], onDelete: Cascade)
  story       Story          @relation(fields: [storyId], references: [id], onDelete: Cascade)

  @@unique([highlightId, storyId])
  @@index([highlightId])
  @@map("highlight_items")
}

enum PostVisibility {
  PUBLIC
  FOLLOWERS
  ONLY_ME
}

enum StoryPrivacy {
  PUBLIC
  FOLLOWERS
  CLOSE_FRIENDS
}